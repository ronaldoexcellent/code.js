const code = {read:(statements)=>{setTimeout(eval(statements));}};
/* Content */ const html = (elem, c) => {return elem.innerHTML = c;}; const text = (elem, text) => {return elem.innerText = text;};const $ = (elem) => {return document.querySelector(elem)};const $$ = (elem) => {return document.querySelectorAll(elem);}; /* styling */ const css = (elem, c) => {elem.style.cssText = c;}; /* Functionality */ const restrict = (obj)=>{return obj.disabled = true}; const restrictAll = (obj)=>{for (i = 0; i < obj.length; i++) {obj[i].disabled = true}}; const unrestrict = (obj)=>{return obj.disabled = false}; const unrestrictAll = (obj)=>{for (i = 0; i < obj.length; i++) {obj[i].disabled = false}}; /* Animate */ const animate = (obj) => {$Count = 0; _auto_slide(); function _auto_slide() {for (i = 0; i < obj.length; i++) {obj[i].hidden = true;} $Count++; if ($Count > obj.length) { $Count = 1; } obj[$Count - 1].hidden = false;} const animation = {time : (t) => {return setTimeout(_auto_slide, t)}}}; /* Triple Click */ x = 0; const tplclick = (obj, t_clk) => { obj.onclick = () => {x++; t_clk; $t_clk = t_clk.toString(); $t_cl = $t_clk.slice($t_clk.indexOf("{") + 1, $t_clk.lastIndexOf("}")); if (x == 3) {eval($t_cl)} setTimeout(function() {x = 0}, 700);}}; /* Import_All */ const importAll = ($import) => {for ($imp = 0; $imp < $import.length; $imp++) {$new_script = document.createElement('script'); $new_script.src = $import[$imp]; document.querySelector('engine').appendChild($new_script)}}; /* Visibility State */ const hide = (obj) => {return obj.hidden = true;}; const hideAll = (obj)=>{for (i = 0; i < obj.length; i++) {obj[i].hidden = true}}; const unhide = (obj) => {return obj.hidden = false;}; const unhideAll = (obj)=>{for (i = 0; i < obj.length; i++) {obj[i].hidden = false}}; const del = (obj) => {return obj.remove();}; /* Import */ const imp = (script) => {document.querySelector('engine').appendChild(script);}; /* Random */ const randomize = (obj) => {return Math.floor(Math.random() * obj.length);}; /* Trace & Untrace Elements */ const trace = ($trace) => {$trace.style.border = "4px solid purple"; for (_tC = 0; _tC < $trace.children.length; _tC++) {$trace.children[_tC].style.cssText = "outline: 4px solid red; border: 4px solid green;"}}; const untrace = ($trace) => {$trace.style.border = "0"; for (_tC in $trace.children) { $trace.children[_tC].style.outline = "0"; $trace.children[_tC].style.border = "0"; }}; /* Page Switcher */ function switch_page($id, $pages_class) {const cc = document.getElementsByClassName($pages_class); for (_i = 0; _i < cc.length; _i++) {cc[_i].style.display = 'none'} document.getElementById($id).style.display = 'block'; $GET_PAGE_TITLE = document.querySelector('title'); $GET_PAGE_TITLE.innerHTML = $id + " - " + app.name;} /* Audio Callback */ function voice_output($txt) {const v_OP = new SpeechSynthesisUtterance(); v_OP.lang = 'en'; v_OP.pitch = '1'; v_OP.rate = '1'; v_OP.volume = '1'; v_OP.text = $txt; window.speechSynthesis.speak(v_OP);} /* Popup */ const popup = (obj)=> {widgets.construct('div'); css(widget, 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.6); backdrop-filter: blur(3px); z-index: 5;'); obj.style.cssText = "position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 70%; background-color: white; padding: 6rem; border-radius: 15px; box-shadow: 0 3rem 5rem rgba(0, 0, 0, 0.3); z-index: 10;"; obj.draggable = true; renderBefore(obj, widget);}; /* transform */ const rotateX = (target, value) => {return target.style.transform = "rotateX(" + value + ")"}; const rotateY = (target, value) => {return target.style.transform = "rotateY(" + value + ")"}; const rotateZ = (target, value) => {return target.style.transform = "rotateZ(" + value + ")"}; const translateX = (target, value) => {return target.style.transform = "translateX(" + value + ")"}; const translateY = (target, value) => {return target.style.transform = "translateY(" + value + ")"}; const scaleX = (target, value) => {return target.style.transform = "scaleX(" + value + ")"}; const scaleY = (target, value) => {return target.style.transform = "scaleY(" + value + ")"}; const skewX = (target, value) => {return target.style.transform = "skewX(" + value + ")"}; const skewY = (target, value) => {return target.style.transform = "skewY(" + value + ")"};